generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String @default("CLIENT")
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  clientProfile Client?
  barberProfile Barber?

  @@map("users")
}

model Client {
  id        String   @id @default(uuid())
  userId    String   @unique
  phone     String?
  birthDate DateTime?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings   Booking[]
  reviews    Review[]

  @@map("clients")
}

model Barber {
  id          String   @id @default(uuid())
  userId      String   @unique
  phone       String?
  specialties String // Especialidades separadas por vírgula
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services Service[]
  bookings Booking[]
  reviews  Review[]

  @@map("barbers")
}

model Service {
  id          String  @id @default(uuid())
  name        String
  description String?
  duration    Int     // Duração em minutos
  price       Float
  category    String  @default("haircut") // Categoria do serviço
  isActive    Boolean @default(true)
  barberId    String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  barber   Barber    @relation(fields: [barberId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("services")
}

model Booking {
  id        String        @id @default(uuid())
  clientId  String
  barberId  String
  serviceId String
  date      DateTime
  startTime String        // Formato HH:MM
  endTime   String        // Formato HH:MM
  status    String @default("PENDING")
  notes     String?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  barber  Barber  @relation(fields: [barberId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  review  Review?

  @@map("bookings")
}

model Review {
  id        String   @id @default(uuid())
  clientId  String
  barberId  String
  bookingId String   @unique
  rating    Int      // 1-5 estrelas
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  barber  Barber  @relation(fields: [barberId], references: [id], onDelete: Cascade)
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Enums removidos para compatibilidade com SQLite
// Use strings: "CLIENT", "BARBER", "ADMIN" para roles
// Use strings: "PENDING", "CONFIRMED", "CANCELLED", "COMPLETED" para status
